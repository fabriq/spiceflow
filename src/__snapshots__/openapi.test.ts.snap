export const snapshot = {};

snapshot[`openapi response 1`] = `
{
  __superjsonMeta: {
    values: {
      "paths./addBody.patch.responses.200.content.application/json.schema.items": [
        "undefined",
      ],
      "paths./addBody.patch.responses.200.content.application/json.schema.patternProperties": [
        "undefined",
      ],
      "paths./addBody.patch.responses.200.content.application/json.schema.required": [
        "undefined",
      ],
      "paths./formWithSchemaForm.post.responses.200.content.multipart/form-data.schema.items": [
        "undefined",
      ],
      "paths./formWithSchemaForm.post.responses.200.content.multipart/form-data.schema.patternProperties": [
        "undefined",
      ],
      "paths./one/ids/{id}.get.parameters.0.description": [
        "undefined",
      ],
      "paths./one/ids/{id}.get.parameters.0.examples": [
        "undefined",
      ],
      "paths./one/ids/{id}.get.responses.404.content.application/json.schema.items": [
        "undefined",
      ],
      "paths./one/ids/{id}.get.responses.404.content.application/json.schema.patternProperties": [
        "undefined",
      ],
      "paths./queryParams.get.parameters.0.description": [
        "undefined",
      ],
      "paths./queryParams.get.parameters.0.examples": [
        "undefined",
      ],
      "paths./queryParams.get.responses.200.content.application/json.schema.items": [
        "undefined",
      ],
      "paths./queryParams.get.responses.200.content.application/json.schema.patternProperties": [
        "undefined",
      ],
      "paths./queryParams.get.responses.200.content.application/json.schema.required": [
        "undefined",
      ],
      "paths./queryParams.post.responses.200.content.application/json.schema.items": [
        "undefined",
      ],
      "paths./queryParams.post.responses.200.content.application/json.schema.patternProperties": [
        "undefined",
      ],
      "paths./queryParams.post.responses.200.content.application/json.schema.required": [
        "undefined",
      ],
      "paths./streamWithSchema.get.responses.200.content.application/json.schema.items": [
        "undefined",
      ],
      "paths./streamWithSchema.get.responses.200.content.application/json.schema.patternProperties": [
        "undefined",
      ],
      "paths./two/ids/{id}.get.parameters.0.description": [
        "undefined",
      ],
      "paths./two/ids/{id}.get.parameters.0.examples": [
        "undefined",
      ],
    },
  },
  components: {
    schemas: {},
  },
  info: {
    description: "Development documentation",
    title: "Spiceflow Docs",
    version: "0.0.0",
  },
  openapi: "3.1.3",
  paths: {
    "/addBody": {
      patch: {
        parameters: [],
        requestBody: {
          content: {
            "application/json": {
              schema: {
                additionalProperties: true,
                properties: {
                  name: {
                    type: "string",
                  },
                },
                required: [
                  "name",
                ],
                type: "object",
              },
            },
          },
          required: true,
        },
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  items: null,
                  patternProperties: null,
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                  required: null,
                  type: "object",
                },
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
    },
    "/formWithSchemaForm": {
      post: {
        description: "This returns form data with schema",
        responses: {
          "200": {
            content: {
              "multipart/form-data": {
                schema: {
                  items: null,
                  patternProperties: null,
                  properties: {
                    age: {
                      type: "string",
                    },
                    name: {
                      type: "string",
                    },
                  },
                  required: [
                    "name",
                    "age",
                  ],
                  type: "object",
                },
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
    },
    "/one/ids/{id}": {
      get: {
        parameters: [
          {
            description: null,
            examples: null,
            in: "path",
            name: "id",
            required: true,
            schema: {
              type: "string",
            },
          },
        ],
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  type: "string",
                },
              },
            },
            description: "",
          },
          "404": {
            content: {
              "application/json": {
                schema: {
                  items: null,
                  patternProperties: null,
                  properties: {
                    message: {
                      type: "string",
                    },
                  },
                  required: [
                    "message",
                  ],
                  type: "object",
                },
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
    },
    "/openapi": {
      get: {
        responses: {
          "200": {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
    },
    "/queryParams": {
      get: {
        parameters: [
          {
            description: null,
            examples: null,
            in: "query",
            name: "name",
            required: true,
            schema: {
              type: "string",
            },
          },
        ],
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  items: null,
                  patternProperties: null,
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                  required: null,
                  type: "object",
                },
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
      post: {
        description: "This is a post",
        operationId: "postQueryParamsXXX",
        parameters: [],
        requestBody: {
          content: {
            "application/json": {
              schema: {
                additionalProperties: true,
                properties: {
                  name: {
                    type: "string",
                  },
                },
                required: [
                  "name",
                ],
                type: "object",
              },
            },
          },
          required: true,
        },
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  items: null,
                  patternProperties: null,
                  properties: {
                    name: {
                      type: "string",
                    },
                  },
                  required: null,
                  type: "object",
                },
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
    },
    "/stream": {
      get: {
        "x-fern-streaming": {
          format: "sse",
        },
        description: "This is a stream",
        responses: {
          "200": {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
    },
    "/streamWithSchema": {
      get: {
        "x-fern-streaming": {
          format: "sse",
        },
        description: "This is a stream with schema",
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  items: null,
                  patternProperties: null,
                  properties: {
                    count: {
                      type: "number",
                    },
                  },
                  required: [
                    "count",
                  ],
                  type: "object",
                },
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
    },
    "/two/ids/{id}": {
      get: {
        parameters: [
          {
            description: null,
            examples: null,
            in: "path",
            name: "id",
            required: true,
            schema: {
              type: "string",
            },
          },
        ],
        responses: {
          "200": {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
          default: {
            content: {
              "*/*": {
                schema: {},
              },
            },
            description: "",
          },
        },
      },
    },
  },
}
`;
